// -------------------------------------------------------------
// 
// File Name: C:\Users\user\Documents\MATLAB\Test\lab2\lab2_fixp\atan2_cordic_nw.v
// Created: 2022-11-30 08:03:48
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: atan2_cordic_nw
// Source Path: lab2_fixp/comp_fixpoint/atan2_cordic_nw
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module atan2_cordic_nw
          (clk,
           reset,
           enb,
           y_in,
           x_in,
           angle);


  input   clk;
  input   reset;
  input   enb;
  input   signed [32:0] y_in;  // sfix33_En22
  input   signed [32:0] x_in;  // sfix33_En22
  output  signed [32:0] angle;  // sfix33_En30


  wire signed [34:0] y_in_ext;  // sfix35_En22
  reg signed [34:0] y_in_reg_out_1;  // sfix35_En22
  wire y_in_msb;  // ufix1
  wire switch_compare_1;
  wire comp_zero;  // ufix1
  wire y_non_zero;  // ufix1
  reg  [0:20] y_non_zero_reg_reg;  // ufix1 [21]
  wire [0:20] y_non_zero_reg_reg_next;  // ufix1 [21]
  wire y_non_zero_p;  // ufix1
  wire signed [34:0] x_in_ext;  // sfix35_En22
  reg signed [34:0] x_in_reg_out_1;  // sfix35_En22
  wire x_in_msb;  // ufix1
  reg  [0:20] x_quad_adjust_reg_reg;  // ufix1 [21]
  wire [0:20] x_quad_adjust_reg_reg_next;  // ufix1 [21]
  wire x_quad_adjust_p;  // ufix1
  reg  [0:20] y_quad_adjust_reg_reg;  // ufix1 [21]
  wire [0:20] y_quad_adjust_reg_reg_next;  // ufix1 [21]
  wire y_quad_adjust_p;  // ufix1
  wire [2:0] x_y_adjust;  // ufix3
  wire signed [32:0] zero;  // sfix33_En30
  wire signed [32:0] onePi_1;  // sfix33_En30
  wire switch_compare_1_1;
  wire signed [35:0] y_in_reg_neg_cast;  // sfix36_En22
  wire signed [35:0] y_in_reg_neg_cast_1;  // sfix36_En22
  wire signed [34:0] y_in_reg_neg_1;  // sfix35_En22
  wire signed [34:0] y_pre_quadcorr_out;  // sfix35_En22
  reg signed [34:0] y0_p;  // sfix35_En22
  wire y0_p_msb;  // ufix1
  wire switch_compare_1_2;
  wire switch_compare_1_3;
  wire signed [35:0] x_in_reg_neg_cast;  // sfix36_En22
  wire signed [35:0] x_in_reg_neg_cast_1;  // sfix36_En22
  wire signed [34:0] x_in_reg_neg_1;  // sfix35_En22
  wire signed [34:0] x_pre_quadcorr_out;  // sfix35_En22
  reg signed [34:0] x0_p;  // sfix35_En22
  wire signed [34:0] y_temp1;  // sfix35_En22
  wire signed [34:0] y_temp_0_1_1;  // sfix35_En22
  wire signed [34:0] y1;  // sfix35_En22
  reg signed [34:0] y1_p;  // sfix35_En22
  wire y1_p_msb;  // ufix1
  wire switch_compare_1_4;
  wire switch_compare_1_5;
  wire signed [34:0] x_temp1;  // sfix35_En22
  wire signed [34:0] x_temp_0_1_1;  // sfix35_En22
  wire signed [34:0] x1;  // sfix35_En22
  reg signed [34:0] x1_p;  // sfix35_En22
  wire signed [34:0] x_shift2;  // sfix35_En22
  wire signed [34:0] y_temp2;  // sfix35_En22
  wire signed [34:0] y_temp_0_2_1;  // sfix35_En22
  wire signed [34:0] y2;  // sfix35_En22
  reg signed [34:0] y2_p;  // sfix35_En22
  wire y2_p_msb;  // ufix1
  wire switch_compare_1_6;
  wire switch_compare_1_7;
  wire signed [34:0] y_shift2;  // sfix35_En22
  wire signed [34:0] x_temp2;  // sfix35_En22
  wire signed [34:0] x_temp_0_2_1;  // sfix35_En22
  wire signed [34:0] x2;  // sfix35_En22
  reg signed [34:0] x2_p;  // sfix35_En22
  wire signed [34:0] x_shift3;  // sfix35_En22
  wire signed [34:0] y_temp3;  // sfix35_En22
  wire signed [34:0] y_temp_0_3_1;  // sfix35_En22
  wire signed [34:0] y3;  // sfix35_En22
  reg signed [34:0] y3_p;  // sfix35_En22
  wire y3_p_msb;  // ufix1
  wire switch_compare_1_8;
  wire switch_compare_1_9;
  wire signed [34:0] y_shift3;  // sfix35_En22
  wire signed [34:0] x_temp3;  // sfix35_En22
  wire signed [34:0] x_temp_0_3_1;  // sfix35_En22
  wire signed [34:0] x3;  // sfix35_En22
  reg signed [34:0] x3_p;  // sfix35_En22
  wire signed [34:0] x_shift4;  // sfix35_En22
  wire signed [34:0] y_temp4;  // sfix35_En22
  wire signed [34:0] y_temp_0_4_1;  // sfix35_En22
  wire signed [34:0] y4;  // sfix35_En22
  reg signed [34:0] y4_p;  // sfix35_En22
  wire y4_p_msb;  // ufix1
  wire switch_compare_1_10;
  wire switch_compare_1_11;
  wire signed [34:0] y_shift4;  // sfix35_En22
  wire signed [34:0] x_temp4;  // sfix35_En22
  wire signed [34:0] x_temp_0_4_1;  // sfix35_En22
  wire signed [34:0] x4;  // sfix35_En22
  reg signed [34:0] x4_p;  // sfix35_En22
  wire signed [34:0] x_shift5;  // sfix35_En22
  wire signed [34:0] y_temp5;  // sfix35_En22
  wire signed [34:0] y_temp_0_5_1;  // sfix35_En22
  wire signed [34:0] y5;  // sfix35_En22
  reg signed [34:0] y5_p;  // sfix35_En22
  wire y5_p_msb;  // ufix1
  wire switch_compare_1_12;
  wire switch_compare_1_13;
  wire signed [34:0] y_shift5;  // sfix35_En22
  wire signed [34:0] x_temp5;  // sfix35_En22
  wire signed [34:0] x_temp_0_5_1;  // sfix35_En22
  wire signed [34:0] x5;  // sfix35_En22
  reg signed [34:0] x5_p;  // sfix35_En22
  wire signed [34:0] x_shift6;  // sfix35_En22
  wire signed [34:0] y_temp6;  // sfix35_En22
  wire signed [34:0] y_temp_0_6_1;  // sfix35_En22
  wire signed [34:0] y6;  // sfix35_En22
  reg signed [34:0] y6_p;  // sfix35_En22
  wire y6_p_msb;  // ufix1
  wire switch_compare_1_14;
  wire switch_compare_1_15;
  wire signed [34:0] y_shift6;  // sfix35_En22
  wire signed [34:0] x_temp6;  // sfix35_En22
  wire signed [34:0] x_temp_0_6_1;  // sfix35_En22
  wire signed [34:0] x6;  // sfix35_En22
  reg signed [34:0] x6_p;  // sfix35_En22
  wire signed [34:0] x_shift7;  // sfix35_En22
  wire signed [34:0] y_temp7;  // sfix35_En22
  wire signed [34:0] y_temp_0_7_1;  // sfix35_En22
  wire signed [34:0] y7;  // sfix35_En22
  reg signed [34:0] y7_p;  // sfix35_En22
  wire y7_p_msb;  // ufix1
  wire switch_compare_1_16;
  wire switch_compare_1_17;
  wire signed [34:0] y_shift7;  // sfix35_En22
  wire signed [34:0] x_temp7;  // sfix35_En22
  wire signed [34:0] x_temp_0_7_1;  // sfix35_En22
  wire signed [34:0] x7;  // sfix35_En22
  reg signed [34:0] x7_p;  // sfix35_En22
  wire signed [34:0] x_shift8;  // sfix35_En22
  wire signed [34:0] y_temp8;  // sfix35_En22
  wire signed [34:0] y_temp_0_8_1;  // sfix35_En22
  wire signed [34:0] y8;  // sfix35_En22
  reg signed [34:0] y8_p;  // sfix35_En22
  wire y8_p_msb;  // ufix1
  wire switch_compare_1_18;
  wire switch_compare_1_19;
  wire signed [34:0] y_shift8;  // sfix35_En22
  wire signed [34:0] x_temp8;  // sfix35_En22
  wire signed [34:0] x_temp_0_8_1;  // sfix35_En22
  wire signed [34:0] x8;  // sfix35_En22
  reg signed [34:0] x8_p;  // sfix35_En22
  wire signed [34:0] x_shift9;  // sfix35_En22
  wire signed [34:0] y_temp9;  // sfix35_En22
  wire signed [34:0] y_temp_0_9_1;  // sfix35_En22
  wire signed [34:0] y9;  // sfix35_En22
  reg signed [34:0] y9_p;  // sfix35_En22
  wire y9_p_msb;  // ufix1
  wire switch_compare_1_20;
  wire switch_compare_1_21;
  wire signed [34:0] y_shift9;  // sfix35_En22
  wire signed [34:0] x_temp9;  // sfix35_En22
  wire signed [34:0] x_temp_0_9_1;  // sfix35_En22
  wire signed [34:0] x9;  // sfix35_En22
  reg signed [34:0] x9_p;  // sfix35_En22
  wire signed [34:0] x_shift10;  // sfix35_En22
  wire signed [34:0] y_temp10;  // sfix35_En22
  wire signed [34:0] y_temp_0_10_1;  // sfix35_En22
  wire signed [34:0] y10;  // sfix35_En22
  reg signed [34:0] y10_p;  // sfix35_En22
  wire y10_p_msb;  // ufix1
  wire switch_compare_1_22;
  wire switch_compare_1_23;
  wire signed [34:0] y_shift10;  // sfix35_En22
  wire signed [34:0] x_temp10;  // sfix35_En22
  wire signed [34:0] x_temp_0_10_1;  // sfix35_En22
  wire signed [34:0] x10;  // sfix35_En22
  reg signed [34:0] x10_p;  // sfix35_En22
  wire signed [34:0] x_shift11;  // sfix35_En22
  wire signed [34:0] y_temp11;  // sfix35_En22
  wire signed [34:0] y_temp_0_11_1;  // sfix35_En22
  wire signed [34:0] y11;  // sfix35_En22
  reg signed [34:0] y11_p;  // sfix35_En22
  wire y11_p_msb;  // ufix1
  wire switch_compare_1_24;
  wire switch_compare_1_25;
  wire signed [34:0] y_shift11;  // sfix35_En22
  wire signed [34:0] x_temp11;  // sfix35_En22
  wire signed [34:0] x_temp_0_11_1;  // sfix35_En22
  wire signed [34:0] x11;  // sfix35_En22
  reg signed [34:0] x11_p;  // sfix35_En22
  wire signed [34:0] x_shift12;  // sfix35_En22
  wire signed [34:0] y_temp12;  // sfix35_En22
  wire signed [34:0] y_temp_0_12_1;  // sfix35_En22
  wire signed [34:0] y12;  // sfix35_En22
  reg signed [34:0] y12_p;  // sfix35_En22
  wire y12_p_msb;  // ufix1
  wire switch_compare_1_26;
  wire switch_compare_1_27;
  wire signed [34:0] y_shift12;  // sfix35_En22
  wire signed [34:0] x_temp12;  // sfix35_En22
  wire signed [34:0] x_temp_0_12_1;  // sfix35_En22
  wire signed [34:0] x12;  // sfix35_En22
  reg signed [34:0] x12_p;  // sfix35_En22
  wire signed [34:0] x_shift13;  // sfix35_En22
  wire signed [34:0] y_temp13;  // sfix35_En22
  wire signed [34:0] y_temp_0_13_1;  // sfix35_En22
  wire signed [34:0] y13;  // sfix35_En22
  reg signed [34:0] y13_p;  // sfix35_En22
  wire y13_p_msb;  // ufix1
  wire switch_compare_1_28;
  wire switch_compare_1_29;
  wire signed [34:0] y_shift13;  // sfix35_En22
  wire signed [34:0] x_temp13;  // sfix35_En22
  wire signed [34:0] x_temp_0_13_1;  // sfix35_En22
  wire signed [34:0] x13;  // sfix35_En22
  reg signed [34:0] x13_p;  // sfix35_En22
  wire signed [34:0] x_shift14;  // sfix35_En22
  wire signed [34:0] y_temp14;  // sfix35_En22
  wire signed [34:0] y_temp_0_14_1;  // sfix35_En22
  wire signed [34:0] y14;  // sfix35_En22
  reg signed [34:0] y14_p;  // sfix35_En22
  wire y14_p_msb;  // ufix1
  wire switch_compare_1_30;
  wire switch_compare_1_31;
  wire signed [34:0] y_shift14;  // sfix35_En22
  wire signed [34:0] x_temp14;  // sfix35_En22
  wire signed [34:0] x_temp_0_14_1;  // sfix35_En22
  wire signed [34:0] x14;  // sfix35_En22
  reg signed [34:0] x14_p;  // sfix35_En22
  wire signed [34:0] x_shift15;  // sfix35_En22
  wire signed [34:0] y_temp15;  // sfix35_En22
  wire signed [34:0] y_temp_0_15_1;  // sfix35_En22
  wire signed [34:0] y15;  // sfix35_En22
  reg signed [34:0] y15_p;  // sfix35_En22
  wire y15_p_msb;  // ufix1
  wire switch_compare_1_32;
  wire switch_compare_1_33;
  wire signed [34:0] y_shift15;  // sfix35_En22
  wire signed [34:0] x_temp15;  // sfix35_En22
  wire signed [34:0] x_temp_0_15_1;  // sfix35_En22
  wire signed [34:0] x15;  // sfix35_En22
  reg signed [34:0] x15_p;  // sfix35_En22
  wire signed [34:0] x_shift16;  // sfix35_En22
  wire signed [34:0] y_temp16;  // sfix35_En22
  wire signed [34:0] y_temp_0_16_1;  // sfix35_En22
  wire signed [34:0] y16;  // sfix35_En22
  reg signed [34:0] y16_p;  // sfix35_En22
  wire y16_p_msb;  // ufix1
  wire switch_compare_1_34;
  wire switch_compare_1_35;
  wire signed [34:0] y_shift16;  // sfix35_En22
  wire signed [34:0] x_temp16;  // sfix35_En22
  wire signed [34:0] x_temp_0_16_1;  // sfix35_En22
  wire signed [34:0] x16;  // sfix35_En22
  reg signed [34:0] x16_p;  // sfix35_En22
  wire signed [34:0] x_shift17;  // sfix35_En22
  wire signed [34:0] y_temp17;  // sfix35_En22
  wire signed [34:0] y_temp_0_17_1;  // sfix35_En22
  wire signed [34:0] y17;  // sfix35_En22
  reg signed [34:0] y17_p;  // sfix35_En22
  wire y17_p_msb;  // ufix1
  wire switch_compare_1_36;
  wire switch_compare_1_37;
  wire signed [34:0] y_shift17;  // sfix35_En22
  wire signed [34:0] x_temp17;  // sfix35_En22
  wire signed [34:0] x_temp_0_17_1;  // sfix35_En22
  wire signed [34:0] x17;  // sfix35_En22
  reg signed [34:0] x17_p;  // sfix35_En22
  wire signed [34:0] x_shift18;  // sfix35_En22
  wire signed [34:0] y_temp18;  // sfix35_En22
  wire signed [34:0] y_temp_0_18_1;  // sfix35_En22
  wire signed [34:0] y18;  // sfix35_En22
  reg signed [34:0] y18_p;  // sfix35_En22
  wire y18_p_msb;  // ufix1
  wire switch_compare_1_38;
  wire switch_compare_1_39;
  wire signed [34:0] y_shift18;  // sfix35_En22
  wire signed [34:0] x_temp18;  // sfix35_En22
  wire signed [34:0] x_temp_0_18_1;  // sfix35_En22
  wire signed [34:0] x18;  // sfix35_En22
  reg signed [34:0] x18_p;  // sfix35_En22
  wire signed [34:0] x_shift19;  // sfix35_En22
  wire signed [34:0] y_temp19;  // sfix35_En22
  wire signed [34:0] y_temp_0_19_1;  // sfix35_En22
  wire signed [34:0] y19;  // sfix35_En22
  reg signed [34:0] y19_p;  // sfix35_En22
  wire y19_p_msb;  // ufix1
  wire switch_compare_1_40;
  wire switch_compare_1_41;
  wire switch_compare_1_42;
  wire switch_compare_1_43;
  wire switch_compare_1_44;
  wire switch_compare_1_45;
  wire switch_compare_1_46;
  wire switch_compare_1_47;
  wire switch_compare_1_48;
  wire switch_compare_1_49;
  wire switch_compare_1_50;
  wire switch_compare_1_51;
  wire switch_compare_1_52;
  wire switch_compare_1_53;
  wire switch_compare_1_54;
  wire switch_compare_1_55;
  wire switch_compare_1_56;
  wire switch_compare_1_57;
  wire switch_compare_1_58;
  wire switch_compare_1_59;
  wire signed [34:0] z0;  // sfix35_En30
  wire signed [34:0] lut_value_s1;  // sfix35_En30
  wire signed [34:0] lut_value_temp1;  // sfix35_En30
  wire signed [34:0] y_temp_0_1_2;  // sfix35_En30
  wire signed [34:0] z1;  // sfix35_En30
  reg signed [34:0] z1_p;  // sfix35_En30
  wire signed [34:0] lut_value_s2;  // sfix35_En30
  wire signed [34:0] lut_value_temp2;  // sfix35_En30
  wire signed [34:0] y_temp_0_2_2;  // sfix35_En30
  wire signed [34:0] z2;  // sfix35_En30
  reg signed [34:0] z2_p;  // sfix35_En30
  wire signed [34:0] lut_value_s3;  // sfix35_En30
  wire signed [34:0] lut_value_temp3;  // sfix35_En30
  wire signed [34:0] y_temp_0_3_2;  // sfix35_En30
  wire signed [34:0] z3;  // sfix35_En30
  reg signed [34:0] z3_p;  // sfix35_En30
  wire signed [34:0] lut_value_s4;  // sfix35_En30
  wire signed [34:0] lut_value_temp4;  // sfix35_En30
  wire signed [34:0] y_temp_0_4_2;  // sfix35_En30
  wire signed [34:0] z4;  // sfix35_En30
  reg signed [34:0] z4_p;  // sfix35_En30
  wire signed [34:0] lut_value_s5;  // sfix35_En30
  wire signed [34:0] lut_value_temp5;  // sfix35_En30
  wire signed [34:0] y_temp_0_5_2;  // sfix35_En30
  wire signed [34:0] z5;  // sfix35_En30
  reg signed [34:0] z5_p;  // sfix35_En30
  wire signed [34:0] lut_value_s6;  // sfix35_En30
  wire signed [34:0] lut_value_temp6;  // sfix35_En30
  wire signed [34:0] y_temp_0_6_2;  // sfix35_En30
  wire signed [34:0] z6;  // sfix35_En30
  reg signed [34:0] z6_p;  // sfix35_En30
  wire signed [34:0] lut_value_s7;  // sfix35_En30
  wire signed [34:0] lut_value_temp7;  // sfix35_En30
  wire signed [34:0] y_temp_0_7_2;  // sfix35_En30
  wire signed [34:0] z7;  // sfix35_En30
  reg signed [34:0] z7_p;  // sfix35_En30
  wire signed [34:0] lut_value_s8;  // sfix35_En30
  wire signed [34:0] lut_value_temp8;  // sfix35_En30
  wire signed [34:0] y_temp_0_8_2;  // sfix35_En30
  wire signed [34:0] z8;  // sfix35_En30
  reg signed [34:0] z8_p;  // sfix35_En30
  wire signed [34:0] lut_value_s9;  // sfix35_En30
  wire signed [34:0] lut_value_temp9;  // sfix35_En30
  wire signed [34:0] y_temp_0_9_2;  // sfix35_En30
  wire signed [34:0] z9;  // sfix35_En30
  reg signed [34:0] z9_p;  // sfix35_En30
  wire signed [34:0] lut_value_s10;  // sfix35_En30
  wire signed [34:0] lut_value_temp10;  // sfix35_En30
  wire signed [34:0] y_temp_0_10_2;  // sfix35_En30
  wire signed [34:0] z10;  // sfix35_En30
  reg signed [34:0] z10_p;  // sfix35_En30
  wire signed [34:0] lut_value_s11;  // sfix35_En30
  wire signed [34:0] lut_value_temp11;  // sfix35_En30
  wire signed [34:0] y_temp_0_11_2;  // sfix35_En30
  wire signed [34:0] z11;  // sfix35_En30
  reg signed [34:0] z11_p;  // sfix35_En30
  wire signed [34:0] lut_value_s12;  // sfix35_En30
  wire signed [34:0] lut_value_temp12;  // sfix35_En30
  wire signed [34:0] y_temp_0_12_2;  // sfix35_En30
  wire signed [34:0] z12;  // sfix35_En30
  reg signed [34:0] z12_p;  // sfix35_En30
  wire signed [34:0] lut_value_s13;  // sfix35_En30
  wire signed [34:0] lut_value_temp13;  // sfix35_En30
  wire signed [34:0] y_temp_0_13_2;  // sfix35_En30
  wire signed [34:0] z13;  // sfix35_En30
  reg signed [34:0] z13_p;  // sfix35_En30
  wire signed [34:0] lut_value_s14;  // sfix35_En30
  wire signed [34:0] lut_value_temp14;  // sfix35_En30
  wire signed [34:0] y_temp_0_14_2;  // sfix35_En30
  wire signed [34:0] z14;  // sfix35_En30
  reg signed [34:0] z14_p;  // sfix35_En30
  wire signed [34:0] lut_value_s15;  // sfix35_En30
  wire signed [34:0] lut_value_temp15;  // sfix35_En30
  wire signed [34:0] y_temp_0_15_2;  // sfix35_En30
  wire signed [34:0] z15;  // sfix35_En30
  reg signed [34:0] z15_p;  // sfix35_En30
  wire signed [34:0] lut_value_s16;  // sfix35_En30
  wire signed [34:0] lut_value_temp16;  // sfix35_En30
  wire signed [34:0] y_temp_0_16_2;  // sfix35_En30
  wire signed [34:0] z16;  // sfix35_En30
  reg signed [34:0] z16_p;  // sfix35_En30
  wire signed [34:0] lut_value_s17;  // sfix35_En30
  wire signed [34:0] lut_value_temp17;  // sfix35_En30
  wire signed [34:0] y_temp_0_17_2;  // sfix35_En30
  wire signed [34:0] z17;  // sfix35_En30
  reg signed [34:0] z17_p;  // sfix35_En30
  wire signed [34:0] lut_value_s18;  // sfix35_En30
  wire signed [34:0] lut_value_temp18;  // sfix35_En30
  wire signed [34:0] y_temp_0_18_2;  // sfix35_En30
  wire signed [34:0] z18;  // sfix35_En30
  reg signed [34:0] z18_p;  // sfix35_En30
  wire signed [34:0] lut_value_s19;  // sfix35_En30
  wire signed [34:0] lut_value_temp19;  // sfix35_En30
  wire signed [34:0] y_temp_0_19_2;  // sfix35_En30
  wire signed [34:0] z19;  // sfix35_En30
  reg signed [34:0] z19_p;  // sfix35_En30
  wire signed [34:0] lut_value_s20;  // sfix35_En30
  wire signed [34:0] lut_value_temp20;  // sfix35_En30
  wire signed [34:0] y_temp_0_20;  // sfix35_En30
  wire signed [34:0] z20;  // sfix35_En30
  reg signed [34:0] z20_p;  // sfix35_En30
  wire signed [32:0] z_out;  // sfix33_En30
  wire signed [33:0] z_temp3_cast;  // sfix34_En30
  wire signed [33:0] z_temp3_cast_1;  // sfix34_En30
  wire signed [32:0] z_temp3_1;  // sfix33_En30
  wire signed [32:0] z_temp2_1;  // sfix33_En30
  wire signed [32:0] z_temp1_1;  // sfix33_En30
  reg signed [32:0] z_out_adjust;  // sfix33_En30
  reg signed [32:0] angle_1;  // sfix33_En30


  assign y_in_ext = {{2{y_in[32]}}, y_in};



  always @(posedge clk or posedge reset)
    begin : y_in_reg_out_process
      if (reset == 1'b1) begin
        y_in_reg_out_1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y_in_reg_out_1 <= y_in_ext;
        end
      end
    end



  assign y_in_msb = y_in_reg_out_1[34];



  assign switch_compare_1 = y_in_msb > 1'b0;



  assign comp_zero = y_in_reg_out_1 > 35'sh000000000;



  assign y_non_zero = (switch_compare_1 == 1'b0 ? comp_zero :
              y_in_msb);



  always @(posedge clk or posedge reset)
    begin : y_non_zero_reg_process
      if (reset == 1'b1) begin
        y_non_zero_reg_reg[0] <= 1'b0;
        y_non_zero_reg_reg[1] <= 1'b0;
        y_non_zero_reg_reg[2] <= 1'b0;
        y_non_zero_reg_reg[3] <= 1'b0;
        y_non_zero_reg_reg[4] <= 1'b0;
        y_non_zero_reg_reg[5] <= 1'b0;
        y_non_zero_reg_reg[6] <= 1'b0;
        y_non_zero_reg_reg[7] <= 1'b0;
        y_non_zero_reg_reg[8] <= 1'b0;
        y_non_zero_reg_reg[9] <= 1'b0;
        y_non_zero_reg_reg[10] <= 1'b0;
        y_non_zero_reg_reg[11] <= 1'b0;
        y_non_zero_reg_reg[12] <= 1'b0;
        y_non_zero_reg_reg[13] <= 1'b0;
        y_non_zero_reg_reg[14] <= 1'b0;
        y_non_zero_reg_reg[15] <= 1'b0;
        y_non_zero_reg_reg[16] <= 1'b0;
        y_non_zero_reg_reg[17] <= 1'b0;
        y_non_zero_reg_reg[18] <= 1'b0;
        y_non_zero_reg_reg[19] <= 1'b0;
        y_non_zero_reg_reg[20] <= 1'b0;
      end
      else begin
        if (enb) begin
          y_non_zero_reg_reg[0] <= y_non_zero_reg_reg_next[0];
          y_non_zero_reg_reg[1] <= y_non_zero_reg_reg_next[1];
          y_non_zero_reg_reg[2] <= y_non_zero_reg_reg_next[2];
          y_non_zero_reg_reg[3] <= y_non_zero_reg_reg_next[3];
          y_non_zero_reg_reg[4] <= y_non_zero_reg_reg_next[4];
          y_non_zero_reg_reg[5] <= y_non_zero_reg_reg_next[5];
          y_non_zero_reg_reg[6] <= y_non_zero_reg_reg_next[6];
          y_non_zero_reg_reg[7] <= y_non_zero_reg_reg_next[7];
          y_non_zero_reg_reg[8] <= y_non_zero_reg_reg_next[8];
          y_non_zero_reg_reg[9] <= y_non_zero_reg_reg_next[9];
          y_non_zero_reg_reg[10] <= y_non_zero_reg_reg_next[10];
          y_non_zero_reg_reg[11] <= y_non_zero_reg_reg_next[11];
          y_non_zero_reg_reg[12] <= y_non_zero_reg_reg_next[12];
          y_non_zero_reg_reg[13] <= y_non_zero_reg_reg_next[13];
          y_non_zero_reg_reg[14] <= y_non_zero_reg_reg_next[14];
          y_non_zero_reg_reg[15] <= y_non_zero_reg_reg_next[15];
          y_non_zero_reg_reg[16] <= y_non_zero_reg_reg_next[16];
          y_non_zero_reg_reg[17] <= y_non_zero_reg_reg_next[17];
          y_non_zero_reg_reg[18] <= y_non_zero_reg_reg_next[18];
          y_non_zero_reg_reg[19] <= y_non_zero_reg_reg_next[19];
          y_non_zero_reg_reg[20] <= y_non_zero_reg_reg_next[20];
        end
      end
    end

  assign y_non_zero_p = y_non_zero_reg_reg[20];
  assign y_non_zero_reg_reg_next[0] = y_non_zero;
  assign y_non_zero_reg_reg_next[1] = y_non_zero_reg_reg[0];
  assign y_non_zero_reg_reg_next[2] = y_non_zero_reg_reg[1];
  assign y_non_zero_reg_reg_next[3] = y_non_zero_reg_reg[2];
  assign y_non_zero_reg_reg_next[4] = y_non_zero_reg_reg[3];
  assign y_non_zero_reg_reg_next[5] = y_non_zero_reg_reg[4];
  assign y_non_zero_reg_reg_next[6] = y_non_zero_reg_reg[5];
  assign y_non_zero_reg_reg_next[7] = y_non_zero_reg_reg[6];
  assign y_non_zero_reg_reg_next[8] = y_non_zero_reg_reg[7];
  assign y_non_zero_reg_reg_next[9] = y_non_zero_reg_reg[8];
  assign y_non_zero_reg_reg_next[10] = y_non_zero_reg_reg[9];
  assign y_non_zero_reg_reg_next[11] = y_non_zero_reg_reg[10];
  assign y_non_zero_reg_reg_next[12] = y_non_zero_reg_reg[11];
  assign y_non_zero_reg_reg_next[13] = y_non_zero_reg_reg[12];
  assign y_non_zero_reg_reg_next[14] = y_non_zero_reg_reg[13];
  assign y_non_zero_reg_reg_next[15] = y_non_zero_reg_reg[14];
  assign y_non_zero_reg_reg_next[16] = y_non_zero_reg_reg[15];
  assign y_non_zero_reg_reg_next[17] = y_non_zero_reg_reg[16];
  assign y_non_zero_reg_reg_next[18] = y_non_zero_reg_reg[17];
  assign y_non_zero_reg_reg_next[19] = y_non_zero_reg_reg[18];
  assign y_non_zero_reg_reg_next[20] = y_non_zero_reg_reg[19];



  assign x_in_ext = {{2{x_in[32]}}, x_in};



  always @(posedge clk or posedge reset)
    begin : x_in_reg_out_process
      if (reset == 1'b1) begin
        x_in_reg_out_1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x_in_reg_out_1 <= x_in_ext;
        end
      end
    end



  assign x_in_msb = x_in_reg_out_1[34];



  always @(posedge clk or posedge reset)
    begin : x_quad_adjust_reg_process
      if (reset == 1'b1) begin
        x_quad_adjust_reg_reg[0] <= 1'b0;
        x_quad_adjust_reg_reg[1] <= 1'b0;
        x_quad_adjust_reg_reg[2] <= 1'b0;
        x_quad_adjust_reg_reg[3] <= 1'b0;
        x_quad_adjust_reg_reg[4] <= 1'b0;
        x_quad_adjust_reg_reg[5] <= 1'b0;
        x_quad_adjust_reg_reg[6] <= 1'b0;
        x_quad_adjust_reg_reg[7] <= 1'b0;
        x_quad_adjust_reg_reg[8] <= 1'b0;
        x_quad_adjust_reg_reg[9] <= 1'b0;
        x_quad_adjust_reg_reg[10] <= 1'b0;
        x_quad_adjust_reg_reg[11] <= 1'b0;
        x_quad_adjust_reg_reg[12] <= 1'b0;
        x_quad_adjust_reg_reg[13] <= 1'b0;
        x_quad_adjust_reg_reg[14] <= 1'b0;
        x_quad_adjust_reg_reg[15] <= 1'b0;
        x_quad_adjust_reg_reg[16] <= 1'b0;
        x_quad_adjust_reg_reg[17] <= 1'b0;
        x_quad_adjust_reg_reg[18] <= 1'b0;
        x_quad_adjust_reg_reg[19] <= 1'b0;
        x_quad_adjust_reg_reg[20] <= 1'b0;
      end
      else begin
        if (enb) begin
          x_quad_adjust_reg_reg[0] <= x_quad_adjust_reg_reg_next[0];
          x_quad_adjust_reg_reg[1] <= x_quad_adjust_reg_reg_next[1];
          x_quad_adjust_reg_reg[2] <= x_quad_adjust_reg_reg_next[2];
          x_quad_adjust_reg_reg[3] <= x_quad_adjust_reg_reg_next[3];
          x_quad_adjust_reg_reg[4] <= x_quad_adjust_reg_reg_next[4];
          x_quad_adjust_reg_reg[5] <= x_quad_adjust_reg_reg_next[5];
          x_quad_adjust_reg_reg[6] <= x_quad_adjust_reg_reg_next[6];
          x_quad_adjust_reg_reg[7] <= x_quad_adjust_reg_reg_next[7];
          x_quad_adjust_reg_reg[8] <= x_quad_adjust_reg_reg_next[8];
          x_quad_adjust_reg_reg[9] <= x_quad_adjust_reg_reg_next[9];
          x_quad_adjust_reg_reg[10] <= x_quad_adjust_reg_reg_next[10];
          x_quad_adjust_reg_reg[11] <= x_quad_adjust_reg_reg_next[11];
          x_quad_adjust_reg_reg[12] <= x_quad_adjust_reg_reg_next[12];
          x_quad_adjust_reg_reg[13] <= x_quad_adjust_reg_reg_next[13];
          x_quad_adjust_reg_reg[14] <= x_quad_adjust_reg_reg_next[14];
          x_quad_adjust_reg_reg[15] <= x_quad_adjust_reg_reg_next[15];
          x_quad_adjust_reg_reg[16] <= x_quad_adjust_reg_reg_next[16];
          x_quad_adjust_reg_reg[17] <= x_quad_adjust_reg_reg_next[17];
          x_quad_adjust_reg_reg[18] <= x_quad_adjust_reg_reg_next[18];
          x_quad_adjust_reg_reg[19] <= x_quad_adjust_reg_reg_next[19];
          x_quad_adjust_reg_reg[20] <= x_quad_adjust_reg_reg_next[20];
        end
      end
    end

  assign x_quad_adjust_p = x_quad_adjust_reg_reg[20];
  assign x_quad_adjust_reg_reg_next[0] = x_in_msb;
  assign x_quad_adjust_reg_reg_next[1] = x_quad_adjust_reg_reg[0];
  assign x_quad_adjust_reg_reg_next[2] = x_quad_adjust_reg_reg[1];
  assign x_quad_adjust_reg_reg_next[3] = x_quad_adjust_reg_reg[2];
  assign x_quad_adjust_reg_reg_next[4] = x_quad_adjust_reg_reg[3];
  assign x_quad_adjust_reg_reg_next[5] = x_quad_adjust_reg_reg[4];
  assign x_quad_adjust_reg_reg_next[6] = x_quad_adjust_reg_reg[5];
  assign x_quad_adjust_reg_reg_next[7] = x_quad_adjust_reg_reg[6];
  assign x_quad_adjust_reg_reg_next[8] = x_quad_adjust_reg_reg[7];
  assign x_quad_adjust_reg_reg_next[9] = x_quad_adjust_reg_reg[8];
  assign x_quad_adjust_reg_reg_next[10] = x_quad_adjust_reg_reg[9];
  assign x_quad_adjust_reg_reg_next[11] = x_quad_adjust_reg_reg[10];
  assign x_quad_adjust_reg_reg_next[12] = x_quad_adjust_reg_reg[11];
  assign x_quad_adjust_reg_reg_next[13] = x_quad_adjust_reg_reg[12];
  assign x_quad_adjust_reg_reg_next[14] = x_quad_adjust_reg_reg[13];
  assign x_quad_adjust_reg_reg_next[15] = x_quad_adjust_reg_reg[14];
  assign x_quad_adjust_reg_reg_next[16] = x_quad_adjust_reg_reg[15];
  assign x_quad_adjust_reg_reg_next[17] = x_quad_adjust_reg_reg[16];
  assign x_quad_adjust_reg_reg_next[18] = x_quad_adjust_reg_reg[17];
  assign x_quad_adjust_reg_reg_next[19] = x_quad_adjust_reg_reg[18];
  assign x_quad_adjust_reg_reg_next[20] = x_quad_adjust_reg_reg[19];



  always @(posedge clk or posedge reset)
    begin : y_quad_adjust_reg_process
      if (reset == 1'b1) begin
        y_quad_adjust_reg_reg[0] <= 1'b0;
        y_quad_adjust_reg_reg[1] <= 1'b0;
        y_quad_adjust_reg_reg[2] <= 1'b0;
        y_quad_adjust_reg_reg[3] <= 1'b0;
        y_quad_adjust_reg_reg[4] <= 1'b0;
        y_quad_adjust_reg_reg[5] <= 1'b0;
        y_quad_adjust_reg_reg[6] <= 1'b0;
        y_quad_adjust_reg_reg[7] <= 1'b0;
        y_quad_adjust_reg_reg[8] <= 1'b0;
        y_quad_adjust_reg_reg[9] <= 1'b0;
        y_quad_adjust_reg_reg[10] <= 1'b0;
        y_quad_adjust_reg_reg[11] <= 1'b0;
        y_quad_adjust_reg_reg[12] <= 1'b0;
        y_quad_adjust_reg_reg[13] <= 1'b0;
        y_quad_adjust_reg_reg[14] <= 1'b0;
        y_quad_adjust_reg_reg[15] <= 1'b0;
        y_quad_adjust_reg_reg[16] <= 1'b0;
        y_quad_adjust_reg_reg[17] <= 1'b0;
        y_quad_adjust_reg_reg[18] <= 1'b0;
        y_quad_adjust_reg_reg[19] <= 1'b0;
        y_quad_adjust_reg_reg[20] <= 1'b0;
      end
      else begin
        if (enb) begin
          y_quad_adjust_reg_reg[0] <= y_quad_adjust_reg_reg_next[0];
          y_quad_adjust_reg_reg[1] <= y_quad_adjust_reg_reg_next[1];
          y_quad_adjust_reg_reg[2] <= y_quad_adjust_reg_reg_next[2];
          y_quad_adjust_reg_reg[3] <= y_quad_adjust_reg_reg_next[3];
          y_quad_adjust_reg_reg[4] <= y_quad_adjust_reg_reg_next[4];
          y_quad_adjust_reg_reg[5] <= y_quad_adjust_reg_reg_next[5];
          y_quad_adjust_reg_reg[6] <= y_quad_adjust_reg_reg_next[6];
          y_quad_adjust_reg_reg[7] <= y_quad_adjust_reg_reg_next[7];
          y_quad_adjust_reg_reg[8] <= y_quad_adjust_reg_reg_next[8];
          y_quad_adjust_reg_reg[9] <= y_quad_adjust_reg_reg_next[9];
          y_quad_adjust_reg_reg[10] <= y_quad_adjust_reg_reg_next[10];
          y_quad_adjust_reg_reg[11] <= y_quad_adjust_reg_reg_next[11];
          y_quad_adjust_reg_reg[12] <= y_quad_adjust_reg_reg_next[12];
          y_quad_adjust_reg_reg[13] <= y_quad_adjust_reg_reg_next[13];
          y_quad_adjust_reg_reg[14] <= y_quad_adjust_reg_reg_next[14];
          y_quad_adjust_reg_reg[15] <= y_quad_adjust_reg_reg_next[15];
          y_quad_adjust_reg_reg[16] <= y_quad_adjust_reg_reg_next[16];
          y_quad_adjust_reg_reg[17] <= y_quad_adjust_reg_reg_next[17];
          y_quad_adjust_reg_reg[18] <= y_quad_adjust_reg_reg_next[18];
          y_quad_adjust_reg_reg[19] <= y_quad_adjust_reg_reg_next[19];
          y_quad_adjust_reg_reg[20] <= y_quad_adjust_reg_reg_next[20];
        end
      end
    end

  assign y_quad_adjust_p = y_quad_adjust_reg_reg[20];
  assign y_quad_adjust_reg_reg_next[0] = y_in_msb;
  assign y_quad_adjust_reg_reg_next[1] = y_quad_adjust_reg_reg[0];
  assign y_quad_adjust_reg_reg_next[2] = y_quad_adjust_reg_reg[1];
  assign y_quad_adjust_reg_reg_next[3] = y_quad_adjust_reg_reg[2];
  assign y_quad_adjust_reg_reg_next[4] = y_quad_adjust_reg_reg[3];
  assign y_quad_adjust_reg_reg_next[5] = y_quad_adjust_reg_reg[4];
  assign y_quad_adjust_reg_reg_next[6] = y_quad_adjust_reg_reg[5];
  assign y_quad_adjust_reg_reg_next[7] = y_quad_adjust_reg_reg[6];
  assign y_quad_adjust_reg_reg_next[8] = y_quad_adjust_reg_reg[7];
  assign y_quad_adjust_reg_reg_next[9] = y_quad_adjust_reg_reg[8];
  assign y_quad_adjust_reg_reg_next[10] = y_quad_adjust_reg_reg[9];
  assign y_quad_adjust_reg_reg_next[11] = y_quad_adjust_reg_reg[10];
  assign y_quad_adjust_reg_reg_next[12] = y_quad_adjust_reg_reg[11];
  assign y_quad_adjust_reg_reg_next[13] = y_quad_adjust_reg_reg[12];
  assign y_quad_adjust_reg_reg_next[14] = y_quad_adjust_reg_reg[13];
  assign y_quad_adjust_reg_reg_next[15] = y_quad_adjust_reg_reg[14];
  assign y_quad_adjust_reg_reg_next[16] = y_quad_adjust_reg_reg[15];
  assign y_quad_adjust_reg_reg_next[17] = y_quad_adjust_reg_reg[16];
  assign y_quad_adjust_reg_reg_next[18] = y_quad_adjust_reg_reg[17];
  assign y_quad_adjust_reg_reg_next[19] = y_quad_adjust_reg_reg[18];
  assign y_quad_adjust_reg_reg_next[20] = y_quad_adjust_reg_reg[19];



  assign x_y_adjust = {y_non_zero_p, x_quad_adjust_p, y_quad_adjust_p};



  assign zero = 33'sh000000000;



  assign onePi_1 = 33'sh0C90FDAA2;



  assign switch_compare_1_1 = y_in_msb > 1'b0;



  assign y_in_reg_neg_cast = {y_in_reg_out_1[34], y_in_reg_out_1};
  assign y_in_reg_neg_cast_1 =  - (y_in_reg_neg_cast);
  assign y_in_reg_neg_1 = y_in_reg_neg_cast_1[34:0];



  assign y_pre_quadcorr_out = (switch_compare_1_1 == 1'b0 ? y_in_reg_out_1 :
              y_in_reg_neg_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : y_pre_quadcorr_out_reg_process
      if (reset == 1'b1) begin
        y0_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y0_p <= y_pre_quadcorr_out;
        end
      end
    end



  assign y0_p_msb = y0_p[34];



  assign switch_compare_1_2 = y0_p_msb > 1'b0;



  assign switch_compare_1_3 = x_in_msb > 1'b0;



  assign x_in_reg_neg_cast = {x_in_reg_out_1[34], x_in_reg_out_1};
  assign x_in_reg_neg_cast_1 =  - (x_in_reg_neg_cast);
  assign x_in_reg_neg_1 = x_in_reg_neg_cast_1[34:0];



  assign x_pre_quadcorr_out = (switch_compare_1_3 == 1'b0 ? x_in_reg_out_1 :
              x_in_reg_neg_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_pre_quadcorr_out_reg_process
      if (reset == 1'b1) begin
        x0_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x0_p <= x_pre_quadcorr_out;
        end
      end
    end



  assign y_temp1 = y0_p - x0_p;



  assign y_temp_0_1_1 = y0_p + x0_p;



  assign y1 = (switch_compare_1_2 == 1'b0 ? y_temp1 :
              y_temp_0_1_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_process
      if (reset == 1'b1) begin
        y1_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y1_p <= y1;
        end
      end
    end



  assign y1_p_msb = y1_p[34];



  assign switch_compare_1_4 = y1_p_msb > 1'b0;



  assign switch_compare_1_5 = y0_p_msb > 1'b0;



  assign x_temp1 = x0_p + y0_p;



  assign x_temp_0_1_1 = x0_p - y0_p;



  assign x1 = (switch_compare_1_5 == 1'b0 ? x_temp1 :
              x_temp_0_1_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_process
      if (reset == 1'b1) begin
        x1_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x1_p <= x1;
        end
      end
    end



  assign x_shift2 = x1_p >>> 8'd1;



  assign y_temp2 = y1_p - x_shift2;



  assign y_temp_0_2_1 = y1_p + x_shift2;



  assign y2 = (switch_compare_1_4 == 1'b0 ? y_temp2 :
              y_temp_0_2_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_1_process
      if (reset == 1'b1) begin
        y2_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y2_p <= y2;
        end
      end
    end



  assign y2_p_msb = y2_p[34];



  assign switch_compare_1_6 = y2_p_msb > 1'b0;



  assign switch_compare_1_7 = y1_p_msb > 1'b0;



  assign y_shift2 = y1_p >>> 8'd1;



  assign x_temp2 = x1_p + y_shift2;



  assign x_temp_0_2_1 = x1_p - y_shift2;



  assign x2 = (switch_compare_1_7 == 1'b0 ? x_temp2 :
              x_temp_0_2_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_1_process
      if (reset == 1'b1) begin
        x2_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x2_p <= x2;
        end
      end
    end



  assign x_shift3 = x2_p >>> 8'd2;



  assign y_temp3 = y2_p - x_shift3;



  assign y_temp_0_3_1 = y2_p + x_shift3;



  assign y3 = (switch_compare_1_6 == 1'b0 ? y_temp3 :
              y_temp_0_3_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_2_process
      if (reset == 1'b1) begin
        y3_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y3_p <= y3;
        end
      end
    end



  assign y3_p_msb = y3_p[34];



  assign switch_compare_1_8 = y3_p_msb > 1'b0;



  assign switch_compare_1_9 = y2_p_msb > 1'b0;



  assign y_shift3 = y2_p >>> 8'd2;



  assign x_temp3 = x2_p + y_shift3;



  assign x_temp_0_3_1 = x2_p - y_shift3;



  assign x3 = (switch_compare_1_9 == 1'b0 ? x_temp3 :
              x_temp_0_3_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_2_process
      if (reset == 1'b1) begin
        x3_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x3_p <= x3;
        end
      end
    end



  assign x_shift4 = x3_p >>> 8'd3;



  assign y_temp4 = y3_p - x_shift4;



  assign y_temp_0_4_1 = y3_p + x_shift4;



  assign y4 = (switch_compare_1_8 == 1'b0 ? y_temp4 :
              y_temp_0_4_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_3_process
      if (reset == 1'b1) begin
        y4_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y4_p <= y4;
        end
      end
    end



  assign y4_p_msb = y4_p[34];



  assign switch_compare_1_10 = y4_p_msb > 1'b0;



  assign switch_compare_1_11 = y3_p_msb > 1'b0;



  assign y_shift4 = y3_p >>> 8'd3;



  assign x_temp4 = x3_p + y_shift4;



  assign x_temp_0_4_1 = x3_p - y_shift4;



  assign x4 = (switch_compare_1_11 == 1'b0 ? x_temp4 :
              x_temp_0_4_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_3_process
      if (reset == 1'b1) begin
        x4_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x4_p <= x4;
        end
      end
    end



  assign x_shift5 = x4_p >>> 8'd4;



  assign y_temp5 = y4_p - x_shift5;



  assign y_temp_0_5_1 = y4_p + x_shift5;



  assign y5 = (switch_compare_1_10 == 1'b0 ? y_temp5 :
              y_temp_0_5_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_4_process
      if (reset == 1'b1) begin
        y5_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y5_p <= y5;
        end
      end
    end



  assign y5_p_msb = y5_p[34];



  assign switch_compare_1_12 = y5_p_msb > 1'b0;



  assign switch_compare_1_13 = y4_p_msb > 1'b0;



  assign y_shift5 = y4_p >>> 8'd4;



  assign x_temp5 = x4_p + y_shift5;



  assign x_temp_0_5_1 = x4_p - y_shift5;



  assign x5 = (switch_compare_1_13 == 1'b0 ? x_temp5 :
              x_temp_0_5_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_4_process
      if (reset == 1'b1) begin
        x5_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x5_p <= x5;
        end
      end
    end



  assign x_shift6 = x5_p >>> 8'd5;



  assign y_temp6 = y5_p - x_shift6;



  assign y_temp_0_6_1 = y5_p + x_shift6;



  assign y6 = (switch_compare_1_12 == 1'b0 ? y_temp6 :
              y_temp_0_6_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_5_process
      if (reset == 1'b1) begin
        y6_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y6_p <= y6;
        end
      end
    end



  assign y6_p_msb = y6_p[34];



  assign switch_compare_1_14 = y6_p_msb > 1'b0;



  assign switch_compare_1_15 = y5_p_msb > 1'b0;



  assign y_shift6 = y5_p >>> 8'd5;



  assign x_temp6 = x5_p + y_shift6;



  assign x_temp_0_6_1 = x5_p - y_shift6;



  assign x6 = (switch_compare_1_15 == 1'b0 ? x_temp6 :
              x_temp_0_6_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_5_process
      if (reset == 1'b1) begin
        x6_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x6_p <= x6;
        end
      end
    end



  assign x_shift7 = x6_p >>> 8'd6;



  assign y_temp7 = y6_p - x_shift7;



  assign y_temp_0_7_1 = y6_p + x_shift7;



  assign y7 = (switch_compare_1_14 == 1'b0 ? y_temp7 :
              y_temp_0_7_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_6_process
      if (reset == 1'b1) begin
        y7_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y7_p <= y7;
        end
      end
    end



  assign y7_p_msb = y7_p[34];



  assign switch_compare_1_16 = y7_p_msb > 1'b0;



  assign switch_compare_1_17 = y6_p_msb > 1'b0;



  assign y_shift7 = y6_p >>> 8'd6;



  assign x_temp7 = x6_p + y_shift7;



  assign x_temp_0_7_1 = x6_p - y_shift7;



  assign x7 = (switch_compare_1_17 == 1'b0 ? x_temp7 :
              x_temp_0_7_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_6_process
      if (reset == 1'b1) begin
        x7_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x7_p <= x7;
        end
      end
    end



  assign x_shift8 = x7_p >>> 8'd7;



  assign y_temp8 = y7_p - x_shift8;



  assign y_temp_0_8_1 = y7_p + x_shift8;



  assign y8 = (switch_compare_1_16 == 1'b0 ? y_temp8 :
              y_temp_0_8_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_7_process
      if (reset == 1'b1) begin
        y8_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y8_p <= y8;
        end
      end
    end



  assign y8_p_msb = y8_p[34];



  assign switch_compare_1_18 = y8_p_msb > 1'b0;



  assign switch_compare_1_19 = y7_p_msb > 1'b0;



  assign y_shift8 = y7_p >>> 8'd7;



  assign x_temp8 = x7_p + y_shift8;



  assign x_temp_0_8_1 = x7_p - y_shift8;



  assign x8 = (switch_compare_1_19 == 1'b0 ? x_temp8 :
              x_temp_0_8_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_7_process
      if (reset == 1'b1) begin
        x8_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x8_p <= x8;
        end
      end
    end



  assign x_shift9 = x8_p >>> 8'd8;



  assign y_temp9 = y8_p - x_shift9;



  assign y_temp_0_9_1 = y8_p + x_shift9;



  assign y9 = (switch_compare_1_18 == 1'b0 ? y_temp9 :
              y_temp_0_9_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_8_process
      if (reset == 1'b1) begin
        y9_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y9_p <= y9;
        end
      end
    end



  assign y9_p_msb = y9_p[34];



  assign switch_compare_1_20 = y9_p_msb > 1'b0;



  assign switch_compare_1_21 = y8_p_msb > 1'b0;



  assign y_shift9 = y8_p >>> 8'd8;



  assign x_temp9 = x8_p + y_shift9;



  assign x_temp_0_9_1 = x8_p - y_shift9;



  assign x9 = (switch_compare_1_21 == 1'b0 ? x_temp9 :
              x_temp_0_9_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_8_process
      if (reset == 1'b1) begin
        x9_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x9_p <= x9;
        end
      end
    end



  assign x_shift10 = x9_p >>> 8'd9;



  assign y_temp10 = y9_p - x_shift10;



  assign y_temp_0_10_1 = y9_p + x_shift10;



  assign y10 = (switch_compare_1_20 == 1'b0 ? y_temp10 :
              y_temp_0_10_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_9_process
      if (reset == 1'b1) begin
        y10_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y10_p <= y10;
        end
      end
    end



  assign y10_p_msb = y10_p[34];



  assign switch_compare_1_22 = y10_p_msb > 1'b0;



  assign switch_compare_1_23 = y9_p_msb > 1'b0;



  assign y_shift10 = y9_p >>> 8'd9;



  assign x_temp10 = x9_p + y_shift10;



  assign x_temp_0_10_1 = x9_p - y_shift10;



  assign x10 = (switch_compare_1_23 == 1'b0 ? x_temp10 :
              x_temp_0_10_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_9_process
      if (reset == 1'b1) begin
        x10_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x10_p <= x10;
        end
      end
    end



  assign x_shift11 = x10_p >>> 8'd10;



  assign y_temp11 = y10_p - x_shift11;



  assign y_temp_0_11_1 = y10_p + x_shift11;



  assign y11 = (switch_compare_1_22 == 1'b0 ? y_temp11 :
              y_temp_0_11_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_10_process
      if (reset == 1'b1) begin
        y11_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y11_p <= y11;
        end
      end
    end



  assign y11_p_msb = y11_p[34];



  assign switch_compare_1_24 = y11_p_msb > 1'b0;



  assign switch_compare_1_25 = y10_p_msb > 1'b0;



  assign y_shift11 = y10_p >>> 8'd10;



  assign x_temp11 = x10_p + y_shift11;



  assign x_temp_0_11_1 = x10_p - y_shift11;



  assign x11 = (switch_compare_1_25 == 1'b0 ? x_temp11 :
              x_temp_0_11_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_10_process
      if (reset == 1'b1) begin
        x11_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x11_p <= x11;
        end
      end
    end



  assign x_shift12 = x11_p >>> 8'd11;



  assign y_temp12 = y11_p - x_shift12;



  assign y_temp_0_12_1 = y11_p + x_shift12;



  assign y12 = (switch_compare_1_24 == 1'b0 ? y_temp12 :
              y_temp_0_12_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_11_process
      if (reset == 1'b1) begin
        y12_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y12_p <= y12;
        end
      end
    end



  assign y12_p_msb = y12_p[34];



  assign switch_compare_1_26 = y12_p_msb > 1'b0;



  assign switch_compare_1_27 = y11_p_msb > 1'b0;



  assign y_shift12 = y11_p >>> 8'd11;



  assign x_temp12 = x11_p + y_shift12;



  assign x_temp_0_12_1 = x11_p - y_shift12;



  assign x12 = (switch_compare_1_27 == 1'b0 ? x_temp12 :
              x_temp_0_12_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_11_process
      if (reset == 1'b1) begin
        x12_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x12_p <= x12;
        end
      end
    end



  assign x_shift13 = x12_p >>> 8'd12;



  assign y_temp13 = y12_p - x_shift13;



  assign y_temp_0_13_1 = y12_p + x_shift13;



  assign y13 = (switch_compare_1_26 == 1'b0 ? y_temp13 :
              y_temp_0_13_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_12_process
      if (reset == 1'b1) begin
        y13_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y13_p <= y13;
        end
      end
    end



  assign y13_p_msb = y13_p[34];



  assign switch_compare_1_28 = y13_p_msb > 1'b0;



  assign switch_compare_1_29 = y12_p_msb > 1'b0;



  assign y_shift13 = y12_p >>> 8'd12;



  assign x_temp13 = x12_p + y_shift13;



  assign x_temp_0_13_1 = x12_p - y_shift13;



  assign x13 = (switch_compare_1_29 == 1'b0 ? x_temp13 :
              x_temp_0_13_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_12_process
      if (reset == 1'b1) begin
        x13_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x13_p <= x13;
        end
      end
    end



  assign x_shift14 = x13_p >>> 8'd13;



  assign y_temp14 = y13_p - x_shift14;



  assign y_temp_0_14_1 = y13_p + x_shift14;



  assign y14 = (switch_compare_1_28 == 1'b0 ? y_temp14 :
              y_temp_0_14_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_13_process
      if (reset == 1'b1) begin
        y14_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y14_p <= y14;
        end
      end
    end



  assign y14_p_msb = y14_p[34];



  assign switch_compare_1_30 = y14_p_msb > 1'b0;



  assign switch_compare_1_31 = y13_p_msb > 1'b0;



  assign y_shift14 = y13_p >>> 8'd13;



  assign x_temp14 = x13_p + y_shift14;



  assign x_temp_0_14_1 = x13_p - y_shift14;



  assign x14 = (switch_compare_1_31 == 1'b0 ? x_temp14 :
              x_temp_0_14_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_13_process
      if (reset == 1'b1) begin
        x14_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x14_p <= x14;
        end
      end
    end



  assign x_shift15 = x14_p >>> 8'd14;



  assign y_temp15 = y14_p - x_shift15;



  assign y_temp_0_15_1 = y14_p + x_shift15;



  assign y15 = (switch_compare_1_30 == 1'b0 ? y_temp15 :
              y_temp_0_15_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_14_process
      if (reset == 1'b1) begin
        y15_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y15_p <= y15;
        end
      end
    end



  assign y15_p_msb = y15_p[34];



  assign switch_compare_1_32 = y15_p_msb > 1'b0;



  assign switch_compare_1_33 = y14_p_msb > 1'b0;



  assign y_shift15 = y14_p >>> 8'd14;



  assign x_temp15 = x14_p + y_shift15;



  assign x_temp_0_15_1 = x14_p - y_shift15;



  assign x15 = (switch_compare_1_33 == 1'b0 ? x_temp15 :
              x_temp_0_15_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_14_process
      if (reset == 1'b1) begin
        x15_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x15_p <= x15;
        end
      end
    end



  assign x_shift16 = x15_p >>> 8'd15;



  assign y_temp16 = y15_p - x_shift16;



  assign y_temp_0_16_1 = y15_p + x_shift16;



  assign y16 = (switch_compare_1_32 == 1'b0 ? y_temp16 :
              y_temp_0_16_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_15_process
      if (reset == 1'b1) begin
        y16_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y16_p <= y16;
        end
      end
    end



  assign y16_p_msb = y16_p[34];



  assign switch_compare_1_34 = y16_p_msb > 1'b0;



  assign switch_compare_1_35 = y15_p_msb > 1'b0;



  assign y_shift16 = y15_p >>> 8'd15;



  assign x_temp16 = x15_p + y_shift16;



  assign x_temp_0_16_1 = x15_p - y_shift16;



  assign x16 = (switch_compare_1_35 == 1'b0 ? x_temp16 :
              x_temp_0_16_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_15_process
      if (reset == 1'b1) begin
        x16_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x16_p <= x16;
        end
      end
    end



  assign x_shift17 = x16_p >>> 8'd16;



  assign y_temp17 = y16_p - x_shift17;



  assign y_temp_0_17_1 = y16_p + x_shift17;



  assign y17 = (switch_compare_1_34 == 1'b0 ? y_temp17 :
              y_temp_0_17_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_16_process
      if (reset == 1'b1) begin
        y17_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y17_p <= y17;
        end
      end
    end



  assign y17_p_msb = y17_p[34];



  assign switch_compare_1_36 = y17_p_msb > 1'b0;



  assign switch_compare_1_37 = y16_p_msb > 1'b0;



  assign y_shift17 = y16_p >>> 8'd16;



  assign x_temp17 = x16_p + y_shift17;



  assign x_temp_0_17_1 = x16_p - y_shift17;



  assign x17 = (switch_compare_1_37 == 1'b0 ? x_temp17 :
              x_temp_0_17_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_16_process
      if (reset == 1'b1) begin
        x17_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x17_p <= x17;
        end
      end
    end



  assign x_shift18 = x17_p >>> 8'd17;



  assign y_temp18 = y17_p - x_shift18;



  assign y_temp_0_18_1 = y17_p + x_shift18;



  assign y18 = (switch_compare_1_36 == 1'b0 ? y_temp18 :
              y_temp_0_18_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_17_process
      if (reset == 1'b1) begin
        y18_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y18_p <= y18;
        end
      end
    end



  assign y18_p_msb = y18_p[34];



  assign switch_compare_1_38 = y18_p_msb > 1'b0;



  assign switch_compare_1_39 = y17_p_msb > 1'b0;



  assign y_shift18 = y17_p >>> 8'd17;



  assign x_temp18 = x17_p + y_shift18;



  assign x_temp_0_18_1 = x17_p - y_shift18;



  assign x18 = (switch_compare_1_39 == 1'b0 ? x_temp18 :
              x_temp_0_18_1);



  // Pipeline registers
  always @(posedge clk or posedge reset)
    begin : x_reg_17_process
      if (reset == 1'b1) begin
        x18_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          x18_p <= x18;
        end
      end
    end



  assign x_shift19 = x18_p >>> 8'd18;



  assign y_temp19 = y18_p - x_shift19;



  assign y_temp_0_19_1 = y18_p + x_shift19;



  assign y19 = (switch_compare_1_38 == 1'b0 ? y_temp19 :
              y_temp_0_19_1);



  always @(posedge clk or posedge reset)
    begin : y_reg_18_process
      if (reset == 1'b1) begin
        y19_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          y19_p <= y19;
        end
      end
    end



  assign y19_p_msb = y19_p[34];



  assign switch_compare_1_40 = y19_p_msb > 1'b0;



  assign switch_compare_1_41 = y18_p_msb > 1'b0;



  assign switch_compare_1_42 = y17_p_msb > 1'b0;



  assign switch_compare_1_43 = y16_p_msb > 1'b0;



  assign switch_compare_1_44 = y15_p_msb > 1'b0;



  assign switch_compare_1_45 = y14_p_msb > 1'b0;



  assign switch_compare_1_46 = y13_p_msb > 1'b0;



  assign switch_compare_1_47 = y12_p_msb > 1'b0;



  assign switch_compare_1_48 = y11_p_msb > 1'b0;



  assign switch_compare_1_49 = y10_p_msb > 1'b0;



  assign switch_compare_1_50 = y9_p_msb > 1'b0;



  assign switch_compare_1_51 = y8_p_msb > 1'b0;



  assign switch_compare_1_52 = y7_p_msb > 1'b0;



  assign switch_compare_1_53 = y6_p_msb > 1'b0;



  assign switch_compare_1_54 = y5_p_msb > 1'b0;



  assign switch_compare_1_55 = y4_p_msb > 1'b0;



  assign switch_compare_1_56 = y3_p_msb > 1'b0;



  assign switch_compare_1_57 = y2_p_msb > 1'b0;



  assign switch_compare_1_58 = y1_p_msb > 1'b0;



  assign switch_compare_1_59 = y0_p_msb > 1'b0;



  assign z0 = 35'sh000000000;



  assign lut_value_s1 = 35'sh03243F6A9;



  assign lut_value_temp1 = z0 + lut_value_s1;



  assign y_temp_0_1_2 = z0 - lut_value_s1;



  assign z1 = (switch_compare_1_59 == 1'b0 ? lut_value_temp1 :
              y_temp_0_1_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_process
      if (reset == 1'b1) begin
        z1_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z1_p <= z1;
        end
      end
    end



  assign lut_value_s2 = 35'sh01DAC6705;



  assign lut_value_temp2 = z1_p + lut_value_s2;



  assign y_temp_0_2_2 = z1_p - lut_value_s2;



  assign z2 = (switch_compare_1_58 == 1'b0 ? lut_value_temp2 :
              y_temp_0_2_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_1_process
      if (reset == 1'b1) begin
        z2_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z2_p <= z2;
        end
      end
    end



  assign lut_value_s3 = 35'sh00FADBAFD;



  assign lut_value_temp3 = z2_p + lut_value_s3;



  assign y_temp_0_3_2 = z2_p - lut_value_s3;



  assign z3 = (switch_compare_1_57 == 1'b0 ? lut_value_temp3 :
              y_temp_0_3_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_2_process
      if (reset == 1'b1) begin
        z3_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z3_p <= z3;
        end
      end
    end



  assign lut_value_s4 = 35'sh007F56EA7;



  assign lut_value_temp4 = z3_p + lut_value_s4;



  assign y_temp_0_4_2 = z3_p - lut_value_s4;



  assign z4 = (switch_compare_1_56 == 1'b0 ? lut_value_temp4 :
              y_temp_0_4_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_3_process
      if (reset == 1'b1) begin
        z4_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z4_p <= z4;
        end
      end
    end



  assign lut_value_s5 = 35'sh003FEAB77;



  assign lut_value_temp5 = z4_p + lut_value_s5;



  assign y_temp_0_5_2 = z4_p - lut_value_s5;



  assign z5 = (switch_compare_1_55 == 1'b0 ? lut_value_temp5 :
              y_temp_0_5_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_4_process
      if (reset == 1'b1) begin
        z5_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z5_p <= z5;
        end
      end
    end



  assign lut_value_s6 = 35'sh001FFD55C;



  assign lut_value_temp6 = z5_p + lut_value_s6;



  assign y_temp_0_6_2 = z5_p - lut_value_s6;



  assign z6 = (switch_compare_1_54 == 1'b0 ? lut_value_temp6 :
              y_temp_0_6_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_5_process
      if (reset == 1'b1) begin
        z6_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z6_p <= z6;
        end
      end
    end



  assign lut_value_s7 = 35'sh000FFFAAB;



  assign lut_value_temp7 = z6_p + lut_value_s7;



  assign y_temp_0_7_2 = z6_p - lut_value_s7;



  assign z7 = (switch_compare_1_53 == 1'b0 ? lut_value_temp7 :
              y_temp_0_7_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_6_process
      if (reset == 1'b1) begin
        z7_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z7_p <= z7;
        end
      end
    end



  assign lut_value_s8 = 35'sh0007FFF55;



  assign lut_value_temp8 = z7_p + lut_value_s8;



  assign y_temp_0_8_2 = z7_p - lut_value_s8;



  assign z8 = (switch_compare_1_52 == 1'b0 ? lut_value_temp8 :
              y_temp_0_8_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_7_process
      if (reset == 1'b1) begin
        z8_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z8_p <= z8;
        end
      end
    end



  assign lut_value_s9 = 35'sh0003FFFEB;



  assign lut_value_temp9 = z8_p + lut_value_s9;



  assign y_temp_0_9_2 = z8_p - lut_value_s9;



  assign z9 = (switch_compare_1_51 == 1'b0 ? lut_value_temp9 :
              y_temp_0_9_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_8_process
      if (reset == 1'b1) begin
        z9_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z9_p <= z9;
        end
      end
    end



  assign lut_value_s10 = 35'sh0001FFFFD;



  assign lut_value_temp10 = z9_p + lut_value_s10;



  assign y_temp_0_10_2 = z9_p - lut_value_s10;



  assign z10 = (switch_compare_1_50 == 1'b0 ? lut_value_temp10 :
              y_temp_0_10_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_9_process
      if (reset == 1'b1) begin
        z10_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z10_p <= z10;
        end
      end
    end



  assign lut_value_s11 = 35'sh000100000;



  assign lut_value_temp11 = z10_p + lut_value_s11;



  assign y_temp_0_11_2 = z10_p - lut_value_s11;



  assign z11 = (switch_compare_1_49 == 1'b0 ? lut_value_temp11 :
              y_temp_0_11_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_10_process
      if (reset == 1'b1) begin
        z11_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z11_p <= z11;
        end
      end
    end



  assign lut_value_s12 = 35'sh000080000;



  assign lut_value_temp12 = z11_p + lut_value_s12;



  assign y_temp_0_12_2 = z11_p - lut_value_s12;



  assign z12 = (switch_compare_1_48 == 1'b0 ? lut_value_temp12 :
              y_temp_0_12_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_11_process
      if (reset == 1'b1) begin
        z12_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z12_p <= z12;
        end
      end
    end



  assign lut_value_s13 = 35'sh000040000;



  assign lut_value_temp13 = z12_p + lut_value_s13;



  assign y_temp_0_13_2 = z12_p - lut_value_s13;



  assign z13 = (switch_compare_1_47 == 1'b0 ? lut_value_temp13 :
              y_temp_0_13_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_12_process
      if (reset == 1'b1) begin
        z13_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z13_p <= z13;
        end
      end
    end



  assign lut_value_s14 = 35'sh000020000;



  assign lut_value_temp14 = z13_p + lut_value_s14;



  assign y_temp_0_14_2 = z13_p - lut_value_s14;



  assign z14 = (switch_compare_1_46 == 1'b0 ? lut_value_temp14 :
              y_temp_0_14_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_13_process
      if (reset == 1'b1) begin
        z14_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z14_p <= z14;
        end
      end
    end



  assign lut_value_s15 = 35'sh000010000;



  assign lut_value_temp15 = z14_p + lut_value_s15;



  assign y_temp_0_15_2 = z14_p - lut_value_s15;



  assign z15 = (switch_compare_1_45 == 1'b0 ? lut_value_temp15 :
              y_temp_0_15_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_14_process
      if (reset == 1'b1) begin
        z15_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z15_p <= z15;
        end
      end
    end



  assign lut_value_s16 = 35'sh000008000;



  assign lut_value_temp16 = z15_p + lut_value_s16;



  assign y_temp_0_16_2 = z15_p - lut_value_s16;



  assign z16 = (switch_compare_1_44 == 1'b0 ? lut_value_temp16 :
              y_temp_0_16_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_15_process
      if (reset == 1'b1) begin
        z16_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z16_p <= z16;
        end
      end
    end



  assign lut_value_s17 = 35'sh000004000;



  assign lut_value_temp17 = z16_p + lut_value_s17;



  assign y_temp_0_17_2 = z16_p - lut_value_s17;



  assign z17 = (switch_compare_1_43 == 1'b0 ? lut_value_temp17 :
              y_temp_0_17_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_16_process
      if (reset == 1'b1) begin
        z17_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z17_p <= z17;
        end
      end
    end



  assign lut_value_s18 = 35'sh000002000;



  assign lut_value_temp18 = z17_p + lut_value_s18;



  assign y_temp_0_18_2 = z17_p - lut_value_s18;



  assign z18 = (switch_compare_1_42 == 1'b0 ? lut_value_temp18 :
              y_temp_0_18_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_17_process
      if (reset == 1'b1) begin
        z18_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z18_p <= z18;
        end
      end
    end



  assign lut_value_s19 = 35'sh000001000;



  assign lut_value_temp19 = z18_p + lut_value_s19;



  assign y_temp_0_19_2 = z18_p - lut_value_s19;



  assign z19 = (switch_compare_1_41 == 1'b0 ? lut_value_temp19 :
              y_temp_0_19_2);



  always @(posedge clk or posedge reset)
    begin : z_reg_18_process
      if (reset == 1'b1) begin
        z19_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z19_p <= z19;
        end
      end
    end



  assign lut_value_s20 = 35'sh000000800;



  assign lut_value_temp20 = z19_p + lut_value_s20;



  assign y_temp_0_20 = z19_p - lut_value_s20;



  assign z20 = (switch_compare_1_40 == 1'b0 ? lut_value_temp20 :
              y_temp_0_20);



  always @(posedge clk or posedge reset)
    begin : z_reg_19_process
      if (reset == 1'b1) begin
        z20_p <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          z20_p <= z20;
        end
      end
    end



  assign z_out = z20_p[32:0];



  assign z_temp3_cast = {z_out[32], z_out};
  assign z_temp3_cast_1 =  - (z_temp3_cast);
  assign z_temp3_1 = z_temp3_cast_1[32:0];



  assign z_temp2_1 = onePi_1 - z_out;



  assign z_temp1_1 = z_out - onePi_1;



  always @(onePi_1, x_y_adjust, z_out, z_temp1_1, z_temp2_1, z_temp3_1, zero) begin
    case ( x_y_adjust)
      3'b000 :
        begin
          z_out_adjust = zero;
        end
      3'b001 :
        begin
          z_out_adjust = zero;
        end
      3'b010 :
        begin
          z_out_adjust = onePi_1;
        end
      3'b011 :
        begin
          z_out_adjust = onePi_1;
        end
      3'b100 :
        begin
          z_out_adjust = z_out;
        end
      3'b101 :
        begin
          z_out_adjust = z_temp3_1;
        end
      3'b110 :
        begin
          z_out_adjust = z_temp2_1;
        end
      default :
        begin
          z_out_adjust = z_temp1_1;
        end
    endcase
  end



  // Pipeline register for output z
  always @(posedge clk or posedge reset)
    begin : z_out_reg_process
      if (reset == 1'b1) begin
        angle_1 <= 33'sh000000000;
      end
      else begin
        if (enb) begin
          angle_1 <= z_out_adjust;
        end
      end
    end



  assign angle = angle_1;

endmodule  // atan2_cordic_nw

