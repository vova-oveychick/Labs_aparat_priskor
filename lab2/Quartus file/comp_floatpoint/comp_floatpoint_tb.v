// -------------------------------------------------------------
// 
// File Name: C:\Users\user\Documents\MATLAB\Test\lab2\lab2_floatp\comp_floatpoint_tb.v
// Created: 2022-11-30 08:10:46
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// O_valid                       ce_out        1
// O_magnitude                   ce_out        1
// O_phase                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: comp_floatpoint_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module comp_floatpoint_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire rawData_I_valid;
  wire O_phase_done;  // ufix1
  wire rdEnb;
  wire O_phase_done_enb;  // ufix1
  reg [3:0] O_valid_addr;  // ufix4
  wire O_phase_lastAddr;  // ufix1
  wire resetn;
  reg  check3_done;  // ufix1
  wire O_magnitude_done;  // ufix1
  wire O_magnitude_done_enb;  // ufix1
  wire O_magnitude_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire O_valid_done;  // ufix1
  wire O_valid_done_enb;  // ufix1
  wire O_valid_active;  // ufix1
  wire [3:0] Cast_To_Single_out1_addr_delay;  // ufix4
  reg  tb_enb_delay;
  reg signed [31:0] fp_I_complex_value_im;  // sfix32
  reg [31:0] rawData_I_complex_value_im;  // ufix32
  reg signed [31:0] status_I_complex_value_im;  // sfix32
  reg [31:0] holdData_I_complex_value_im;  // ufix32
  reg [31:0] I_complex_value_im_offset;  // ufix32
  reg [31:0] I_complex_value_im;  // ufix32
  wire [31:0] I_complex_value_im_1;  // ufix32
  reg [3:0] Constant_out1_addr;  // ufix4
  wire Constant_out1_active;  // ufix1
  wire Constant_out1_enb;  // ufix1
  reg signed [31:0] fp_I_complex_value_re;  // sfix32
  reg [31:0] rawData_I_complex_value_re;  // ufix32
  reg signed [31:0] status_I_complex_value_re;  // sfix32
  reg [31:0] holdData_I_complex_value_re;  // ufix32
  reg [31:0] I_complex_value_re_offset;  // ufix32
  reg [31:0] I_complex_value_re;  // ufix32
  wire [31:0] I_complex_value_re_1;  // ufix32
  reg  holdData_I_valid;
  reg  I_valid_offset;
  wire I_valid_1;
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire O_valid;
  wire [31:0] O_magnitude;  // ufix32
  wire [31:0] O_phase;  // ufix32
  wire O_valid_enb;  // ufix1
  wire O_valid_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  reg [5:0] O_valid_chkcnt;  // ufix6
  wire O_valid_ignCntDone;  // ufix1
  wire O_valid_needToCount;  // ufix1
  wire O_valid_chkenb;  // ufix1
  wire O_valid_chkdata;  // ufix1
  wire O_valid_expected_1;
  wire O_valid_ref;
  reg  O_valid_testFailure;  // ufix1
  reg [5:0] O_magnitude_chkcnt;  // ufix6
  wire O_magnitude_ignCntDone;  // ufix1
  wire O_magnitude_needToCount;  // ufix1
  wire O_magnitude_chkenb;  // ufix1
  wire O_magnitude_chkdata;  // ufix1
  wire [31:0] O_magnitude_expected_1;  // ufix32
  wire [31:0] O_magnitude_ref;  // ufix32
  reg  O_magnitude_testFailure;  // ufix1
  reg [5:0] O_phase_chkcnt;  // ufix6
  wire O_phase_ignCntDone;  // ufix1
  wire O_phase_needToCount;  // ufix1
  wire O_phase_chkenb;  // ufix1
  wire O_phase_chkdata;  // ufix1
  wire [31:0] O_phase_expected_1;  // ufix32
  wire [31:0] O_phase_ref;  // ufix32
  reg  O_phase_testFailure;  // ufix1
  wire testFailure;  // ufix1

  function real absReal(input real num);
  begin
    if (num < 0)
      absReal = -num;
    else
      absReal = num;
  end
  endfunction

  function real floatHalfToReal;
  input [15:0] x;
  reg [63:0] conv;

  begin
    conv[63] = x[15]; // sign 
    if (x[14:10] == 5'b0) // exp 
      conv[62:52] = 11'b0; 
    else
      conv[62:52] = 1023 + (x[14:10] - 15);
    conv[51:42] = x[9:0]; // mantissa 
    conv[41:0] = 42'b0;
    if (((x[14:10] == 5'h1F) && (x[9:0] != 10'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatHalfToReal = $bitstoreal(conv);
  end
  endfunction

  function real floatSingleToReal;
  input [31:0] x;
  reg [63:0] conv;

  begin
    conv[63] = x[31]; // sign 
    if (x[30:23] == 8'b0) // exp 
      conv[62:52] = 11'b0; 
    else
      conv[62:52] = 1023 + (x[30:23] - 127);
    conv[51:29] = x[22:0]; // mantissa 
    conv[28:0] = 29'b0;
    if (((x[30:23] == 8'hFF) && (x[22:0] != 23'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatSingleToReal = $bitstoreal(conv);
  end
  endfunction

  function real floatDoubleToReal;
  input [63:0] x;
  reg [63:0] conv;

  begin
    conv[63:0] = x[63:0]; 
    if (((x[62:52] == 11'h7FF) && (x[51:0] != 52'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatDoubleToReal = $bitstoreal(conv);
  end
  endfunction

  function isFloatEpsEqual(input real a, input real b, input real eps);
  real absdiff;

  begin
    absdiff = absReal(a - b);
    if (absdiff < eps) // absolute error check 
      isFloatEpsEqual = 1;
    else if (a == b) // check infinities 
      isFloatEpsEqual = 1; 
    else if (a*b == 0.0) // either is zero 
      isFloatEpsEqual = (absdiff < eps);
    else if (absReal(a) < absReal(b)) // relative error check
      isFloatEpsEqual = absdiff/absReal(b) < eps;
    else
      isFloatEpsEqual = absdiff/absReal(a) < eps;
  end
  endfunction
  function isFloatHalfEpsEqual;
  input [15:0] x;
  input [15:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatHalfToReal(x);
    b = floatHalfToReal(y);
    isFloatHalfEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction
  function isFloatSingleEpsEqual;
  input [31:0] x;
  input [31:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatSingleToReal(x);
    b = floatSingleToReal(y);
    isFloatSingleEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction
  function isFloatDoubleEpsEqual;
  input [63:0] x;
  input [63:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatDoubleToReal(x);
    b = floatDoubleToReal(y);
    isFloatDoubleEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction

  // Data source for I_valid
  assign rawData_I_valid = 1'b1;



  assign O_phase_done_enb = O_phase_done & rdEnb;



  assign O_phase_lastAddr = O_valid_addr >= 4'b1010;



  assign O_phase_done = O_phase_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_3
      if (reset) begin
        check3_done <= 0;
      end
      else begin
        if (O_phase_done_enb) begin
          check3_done <= O_phase_done;
        end
      end
    end

  assign O_magnitude_done_enb = O_magnitude_done & rdEnb;



  assign O_magnitude_lastAddr = O_valid_addr >= 4'b1010;



  assign O_magnitude_done = O_magnitude_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (O_magnitude_done_enb) begin
          check2_done <= O_magnitude_done;
        end
      end
    end

  assign O_valid_done_enb = O_valid_done & rdEnb;



  assign O_valid_active = O_valid_addr != 4'b1010;



  // Data source for I_complex_value_im
  initial
    begin : I_complex_value_im_fileread
      fp_I_complex_value_im = $fopen("I_complex_value_im.dat", "r");
      status_I_complex_value_im = $rewind(fp_I_complex_value_im);
    end

  always @(Cast_To_Single_out1_addr_delay, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_complex_value_im <= 32'bx;
      end
      else if (rdEnb == 1) begin
        status_I_complex_value_im = $fscanf(fp_I_complex_value_im, "%h", rawData_I_complex_value_im);
      end
    end

  // holdData reg for Cast_To_Single_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Cast_To_Single_out1
      if (reset) begin
        holdData_I_complex_value_im <= 32'bx;
      end
      else begin
        holdData_I_complex_value_im <= rawData_I_complex_value_im;
      end
    end

  always @(rawData_I_complex_value_im or rdEnb)
    begin : stimuli_Cast_To_Single_out1_1
      if (rdEnb == 1'b0) begin
        I_complex_value_im_offset <= holdData_I_complex_value_im;
      end
      else begin
        I_complex_value_im_offset <= rawData_I_complex_value_im;
      end
    end

  always #2 I_complex_value_im <= I_complex_value_im_offset;

  assign I_complex_value_im_1 = I_complex_value_im;

  assign Constant_out1_active = Constant_out1_addr != 4'b1010;



  assign Constant_out1_enb = Constant_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : Constant_process
      if (reset == 1'b1) begin
        Constant_out1_addr <= 4'b0000;
      end
      else begin
        if (Constant_out1_enb) begin
          if (Constant_out1_addr >= 4'b1010) begin
            Constant_out1_addr <= 4'b0000;
          end
          else begin
            Constant_out1_addr <= Constant_out1_addr + 4'b0001;
          end
        end
      end
    end



  assign #1 Cast_To_Single_out1_addr_delay = Constant_out1_addr;

  // Data source for I_complex_value_re
  initial
    begin : I_complex_value_re_fileread
      fp_I_complex_value_re = $fopen("I_complex_value_re.dat", "r");
      status_I_complex_value_re = $rewind(fp_I_complex_value_re);
    end

  always @(Cast_To_Single_out1_addr_delay, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_complex_value_re <= 32'bx;
      end
      else if (rdEnb == 1) begin
        status_I_complex_value_re = $fscanf(fp_I_complex_value_re, "%h", rawData_I_complex_value_re);
      end
    end

  // holdData reg for Cast_To_Single_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Cast_To_Single_out1_2
      if (reset) begin
        holdData_I_complex_value_re <= 32'bx;
      end
      else begin
        holdData_I_complex_value_re <= rawData_I_complex_value_re;
      end
    end

  always @(rawData_I_complex_value_re or rdEnb)
    begin : stimuli_Cast_To_Single_out1_3
      if (rdEnb == 1'b0) begin
        I_complex_value_re_offset <= holdData_I_complex_value_re;
      end
      else begin
        I_complex_value_re_offset <= rawData_I_complex_value_re;
      end
    end

  always #2 I_complex_value_re <= I_complex_value_re_offset;

  assign I_complex_value_re_1 = I_complex_value_re;

  // holdData reg for Constant_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Constant_out1
      if (reset) begin
        holdData_I_valid <= 1'bx;
      end
      else begin
        holdData_I_valid <= rawData_I_valid;
      end
    end

  always @(rawData_I_valid or rdEnb)
    begin : stimuli_Constant_out1_1
      if (rdEnb == 1'b0) begin
        I_valid_offset <= holdData_I_valid;
      end
      else begin
        I_valid_offset <= rawData_I_valid;
      end
    end

  assign #2 I_valid_1 = I_valid_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  comp_floatpoint u_comp_floatpoint (.clk(clk),
                                     .reset(reset),
                                     .clk_enable(clk_enable),
                                     .I_valid(I_valid_1),
                                     .I_complex_value_re(I_complex_value_re_1),  // single
                                     .I_complex_value_im(I_complex_value_im_1),  // single
                                     .ce_out(ce_out),
                                     .O_valid(O_valid),
                                     .O_magnitude(O_magnitude),  // single
                                     .O_phase(O_phase)  // single
                                     );

  assign O_valid_enb = ce_out & O_valid_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        O_valid_addr <= 4'b0000;
      end
      else begin
        if (O_valid_enb) begin
          if (O_valid_addr >= 4'b1010) begin
            O_valid_addr <= 4'b0000;
          end
          else begin
            O_valid_addr <= O_valid_addr + 4'b0001;
          end
        end
      end
    end



  assign O_valid_lastAddr = O_valid_addr >= 4'b1010;



  assign O_valid_done = O_valid_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (O_valid_done_enb) begin
          check1_done <= O_valid_done;
        end
      end
    end

  assign snkDone = check3_done & (check1_done & check2_done);



  assign O_valid_ignCntDone = O_valid_chkcnt != 6'b101111;



  assign O_valid_needToCount = ce_out & O_valid_ignCntDone;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 47
  always @(posedge clk or posedge reset)
    begin : O_valid_IgnoreDataChecking_process
      if (reset == 1'b1) begin
        O_valid_chkcnt <= 6'b000000;
      end
      else begin
        if (O_valid_needToCount) begin
          if (O_valid_chkcnt >= 6'b101111) begin
            O_valid_chkcnt <= 6'b000000;
          end
          else begin
            O_valid_chkcnt <= O_valid_chkcnt + 6'b000001;
          end
        end
      end
    end



  assign O_valid_chkenb = O_valid_chkcnt == 6'b101111;



  assign O_valid_chkdata = ce_out & O_valid_chkenb;



  // Data source for O_valid_expected
  assign O_valid_expected_1 = 1'b0;



  assign O_valid_ref = O_valid_expected_1;

  always @(posedge clk or posedge reset)
    begin : O_valid_checker
      if (reset == 1'b1) begin
        O_valid_testFailure <= 1'b0;
      end
      else begin
        if (O_valid_chkdata == 1'b1 && O_valid !== O_valid_ref) begin
          O_valid_testFailure <= 1'b1;
          $display("ERROR in O_valid at time %t : Expected '%h' Actual '%h'", $time, O_valid_ref, O_valid);
        end
      end
    end

  assign O_magnitude_ignCntDone = O_magnitude_chkcnt != 6'b101111;



  assign O_magnitude_needToCount = ce_out & O_magnitude_ignCntDone;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 47
  always @(posedge clk or posedge reset)
    begin : O_magnitude_IgnoreDataChecking_process
      if (reset == 1'b1) begin
        O_magnitude_chkcnt <= 6'b000000;
      end
      else begin
        if (O_magnitude_needToCount) begin
          if (O_magnitude_chkcnt >= 6'b101111) begin
            O_magnitude_chkcnt <= 6'b000000;
          end
          else begin
            O_magnitude_chkcnt <= O_magnitude_chkcnt + 6'b000001;
          end
        end
      end
    end



  assign O_magnitude_chkenb = O_magnitude_chkcnt == 6'b101111;



  assign O_magnitude_chkdata = ce_out & O_magnitude_chkenb;



  // Data source for O_magnitude_expected
  assign O_magnitude_expected_1 = 32'h00000000;



  assign O_magnitude_ref = O_magnitude_expected_1;

  always @(posedge clk or posedge reset)
    begin : O_magnitude_checker
      if (reset == 1'b1) begin
        O_magnitude_testFailure <= 1'b0;
      end
      else begin
        if (O_magnitude_chkdata == 1'b1 && !isFloatSingleEpsEqual(O_magnitude, O_magnitude_ref, 9.9999999999999995e-08)) begin
          O_magnitude_testFailure <= 1'b1;
          $display("ERROR in O_magnitude at time %t : Expected '%h' Actual '%h'", $time, O_magnitude_ref, O_magnitude);
        end
      end
    end

  assign O_phase_ignCntDone = O_phase_chkcnt != 6'b101111;



  assign O_phase_needToCount = ce_out & O_phase_ignCntDone;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 47
  always @(posedge clk or posedge reset)
    begin : O_phase_IgnoreDataChecking_process
      if (reset == 1'b1) begin
        O_phase_chkcnt <= 6'b000000;
      end
      else begin
        if (O_phase_needToCount) begin
          if (O_phase_chkcnt >= 6'b101111) begin
            O_phase_chkcnt <= 6'b000000;
          end
          else begin
            O_phase_chkcnt <= O_phase_chkcnt + 6'b000001;
          end
        end
      end
    end



  assign O_phase_chkenb = O_phase_chkcnt == 6'b101111;



  assign O_phase_chkdata = ce_out & O_phase_chkenb;



  // Data source for O_phase_expected
  assign O_phase_expected_1 = 32'h00000000;



  assign O_phase_ref = O_phase_expected_1;

  always @(posedge clk or posedge reset)
    begin : O_phase_checker
      if (reset == 1'b1) begin
        O_phase_testFailure <= 1'b0;
      end
      else begin
        if (O_phase_chkdata == 1'b1 && !isFloatSingleEpsEqual(O_phase, O_phase_ref, 9.9999999999999995e-08)) begin
          O_phase_testFailure <= 1'b1;
          $display("ERROR in O_phase at time %t : Expected '%h' Actual '%h'", $time, O_phase_ref, O_phase);
        end
      end
    end

  assign testFailure = O_phase_testFailure | (O_valid_testFailure | O_magnitude_testFailure);



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // comp_floatpoint_tb

